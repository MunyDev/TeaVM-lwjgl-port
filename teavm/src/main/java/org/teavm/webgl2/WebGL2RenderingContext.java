package org.teavm.webgl2;
import org.teavm.jso.*;
import org.teavm.jso.dom.html.HTMLCanvasElement;
import org.teavm.jso.dom.html.HTMLImageElement;
import org.teavm.jso.typedarrays.ArrayBuffer;
import org.teavm.jso.typedarrays.ArrayBufferView;
import org.teavm.jso.typedarrays.Float32Array;
import org.teavm.jso.typedarrays.Int32Array;
import org.teavm.jso.webgl.WebGLActiveInfo;
import org.teavm.jso.webgl.WebGLBuffer;
import org.teavm.jso.webgl.WebGLProgram;
import org.teavm.jso.webgl.WebGLRenderingContext;
import org.teavm.jso.webgl.WebGLTexture;
import org.teavm.jso.webgl.WebGLUniformLocation;
public interface WebGL2RenderingContext extends WebGLRenderingContext{
	public static int READ_BUFFER                                   = 0x0C02;
	public static int UNPACK_ROW_LENGTH                             = 0x0CF2;
	public static int UNPACK_SKIP_ROWS                              = 0x0CF3;
	public static int UNPACK_SKIP_PIXELS                            = 0x0CF4;
	public static int PACK_ROW_LENGTH                               = 0x0D02;
	public static int PACK_SKIP_ROWS                                = 0x0D03;
	public static int PACK_SKIP_PIXELS                              = 0x0D04;
	public static int COLOR                                         = 0x1800;
	public static int DEPTH                                         = 0x1801;
	public static int STENCIL                                       = 0x1802;
	public static int RED                                           = 0x1903;
	public static int RGB8                                          = 0x8051;
	public static int RGBA8                                         = 0x8058;
	public static int RGB10_A2                                      = 0x8059;
	public static int TEXTURE_BINDING_3D                            = 0x806A;
	public static int UNPACK_SKIP_IMAGES                            = 0x806D;
	public static int UNPACK_IMAGE_HEIGHT                           = 0x806E;
	public static int TEXTURE_3D                                    = 0x806F;
	public static int TEXTURE_WRAP_R                                = 0x8072;
	public static int MAX_3D_TEXTURE_SIZE                           = 0x8073;
	public static int UNSIGNED_INT_2_10_10_10_REV                   = 0x8368;
	public static int MAX_ELEMENTS_VERTICES                         = 0x80E8;
	public static int MAX_ELEMENTS_INDICES                          = 0x80E9;
	public static int TEXTURE_MIN_LOD                               = 0x813A;
	public static int TEXTURE_MAX_LOD                               = 0x813B;
	public static int TEXTURE_BASE_LEVEL                            = 0x813C;
	public static int TEXTURE_MAX_LEVEL                             = 0x813D;
	public static int MIN                                           = 0x8007;
	public static int MAX                                           = 0x8008;
	public static int DEPTH_COMPONENT24                             = 0x81A6;
	public static int MAX_TEXTURE_LOD_BIAS                          = 0x84FD;
	public static int TEXTURE_COMPARE_MODE                          = 0x884C;
	public static int TEXTURE_COMPARE_FUNC                          = 0x884D;
	public static int CURRENT_QUERY                                 = 0x8865;
	public static int QUERY_RESULT                                  = 0x8866;
	public static int QUERY_RESULT_AVAILABLE                        = 0x8867;
	public static int STREAM_READ                                   = 0x88E1;
	public static int STREAM_COPY                                   = 0x88E2;
	public static int STATIC_READ                                   = 0x88E5;
	public static int STATIC_COPY                                   = 0x88E6;
	public static int DYNAMIC_READ                                  = 0x88E9;
	public static int DYNAMIC_COPY                                  = 0x88EA;
	public static int MAX_DRAW_BUFFERS                              = 0x8824;
	public static int DRAW_BUFFER0                                  = 0x8825;
	public static int DRAW_BUFFER1                                  = 0x8826;
	public static int DRAW_BUFFER2                                  = 0x8827;
	public static int DRAW_BUFFER3                                  = 0x8828;
	public static int DRAW_BUFFER4                                  = 0x8829;
	public static int DRAW_BUFFER5                                  = 0x882A;
	public static int DRAW_BUFFER6                                  = 0x882B;
	public static int DRAW_BUFFER7                                  = 0x882C;
	public static int DRAW_BUFFER8                                  = 0x882D;
	public static int DRAW_BUFFER9                                  = 0x882E;
	public static int DRAW_BUFFER10                                 = 0x882F;
	public static int DRAW_BUFFER11                                 = 0x8830;
	public static int DRAW_BUFFER12                                 = 0x8831;
	public static int DRAW_BUFFER13                                 = 0x8832;
	public static int DRAW_BUFFER14                                 = 0x8833;
	public static int DRAW_BUFFER15                                 = 0x8834;
	public static int MAX_FRAGMENT_UNIFORM_COMPONENTS               = 0x8B49;
	public static int MAX_VERTEX_UNIFORM_COMPONENTS                 = 0x8B4A;
	public static int SAMPLER_3D                                    = 0x8B5F;
	public static int SAMPLER_2D_SHADOW                             = 0x8B62;
	public static int FRAGMENT_SHADER_DERIVATIVE_HINT               = 0x8B8B;
	public static int PIXEL_PACK_BUFFER                             = 0x88EB;
	public static int PIXEL_UNPACK_BUFFER                           = 0x88EC;
	public static int PIXEL_PACK_BUFFER_BINDING                     = 0x88ED;
	public static int PIXEL_UNPACK_BUFFER_BINDING                   = 0x88EF;
	public static int FLOAT_MAT2x3                                  = 0x8B65;
	public static int FLOAT_MAT2x4                                  = 0x8B66;
	public static int FLOAT_MAT3x2                                  = 0x8B67;
	public static int FLOAT_MAT3x4                                  = 0x8B68;
	public static int FLOAT_MAT4x2                                  = 0x8B69;
	public static int FLOAT_MAT4x3                                  = 0x8B6A;
	public static int SRGB                                          = 0x8C40;
	public static int SRGB8                                         = 0x8C41;
	public static int SRGB8_ALPHA8                                  = 0x8C43;
	public static int COMPARE_REF_TO_TEXTURE                        = 0x884E;
	public static int RGBA32F                                       = 0x8814;
	public static int RGB32F                                        = 0x8815;
	public static int RGBA16F                                       = 0x881A;
	public static int RGB16F                                        = 0x881B;
	public static int VERTEX_ATTRIB_ARRAY_INTEGER                   = 0x88FD;
	public static int MAX_ARRAY_TEXTURE_LAYERS                      = 0x88FF;
	public static int MIN_PROGRAM_TEXEL_OFFSET                      = 0x8904;
	public static int MAX_PROGRAM_TEXEL_OFFSET                      = 0x8905;
	public static int MAX_VARYING_COMPONENTS                        = 0x8B4B;
	public static int TEXTURE_2D_ARRAY                              = 0x8C1A;
	public static int TEXTURE_BINDING_2D_ARRAY                      = 0x8C1D;
	public static int R11F_G11F_B10F                                = 0x8C3A;
	public static int UNSIGNED_INT_10F_11F_11F_REV                  = 0x8C3B;
	public static int RGB9_E5                                       = 0x8C3D;
	public static int UNSIGNED_INT_5_9_9_9_REV                      = 0x8C3E;
	public static int TRANSFORM_FEEDBACK_BUFFER_MODE                = 0x8C7F;
	public static int MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    = 0x8C80;
	public static int TRANSFORM_FEEDBACK_VARYINGS                   = 0x8C83;
	public static int TRANSFORM_FEEDBACK_BUFFER_START               = 0x8C84;
	public static int TRANSFORM_FEEDBACK_BUFFER_SIZE                = 0x8C85;
	public static int TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         = 0x8C88;
	public static int RASTERIZER_DISCARD                            = 0x8C89;
	public static int MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
	public static int MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       = 0x8C8B;
	public static int INTERLEAVED_ATTRIBS                           = 0x8C8C;
	public static int SEPARATE_ATTRIBS                              = 0x8C8D;
	public static int TRANSFORM_FEEDBACK_BUFFER                     = 0x8C8E;
	public static int TRANSFORM_FEEDBACK_BUFFER_BINDING             = 0x8C8F;
	public static int RGBA32UI                                      = 0x8D70;
	public static int RGB32UI                                       = 0x8D71;
	public static int RGBA16UI                                      = 0x8D76;
	public static int RGB16UI                                       = 0x8D77;
	public static int RGBA8UI                                       = 0x8D7C;
	public static int RGB8UI                                        = 0x8D7D;
	public static int RGBA32I                                       = 0x8D82;
	public static int RGB32I                                        = 0x8D83;
	public static int RGBA16I                                       = 0x8D88;
	public static int RGB16I                                        = 0x8D89;
	public static int RGBA8I                                        = 0x8D8E;
	public static int RGB8I                                         = 0x8D8F;
	public static int RED_INTEGER                                   = 0x8D94;
	public static int RGB_INTEGER                                   = 0x8D98;
	public static int RGBA_INTEGER                                  = 0x8D99;
	public static int SAMPLER_2D_ARRAY                              = 0x8DC1;
	public static int SAMPLER_2D_ARRAY_SHADOW                       = 0x8DC4;
	public static int SAMPLER_CUBE_SHADOW                           = 0x8DC5;
	public static int UNSIGNED_INT_VEC2                             = 0x8DC6;
	public static int UNSIGNED_INT_VEC3                             = 0x8DC7;
	public static int UNSIGNED_INT_VEC4                             = 0x8DC8;
	public static int INT_SAMPLER_2D                                = 0x8DCA;
	public static int INT_SAMPLER_3D                                = 0x8DCB;
	public static int INT_SAMPLER_CUBE                              = 0x8DCC;
	public static int INT_SAMPLER_2D_ARRAY                          = 0x8DCF;
	public static int UNSIGNED_INT_SAMPLER_2D                       = 0x8DD2;
	public static int UNSIGNED_INT_SAMPLER_3D                       = 0x8DD3;
	public static int UNSIGNED_INT_SAMPLER_CUBE                     = 0x8DD4;
	public static int UNSIGNED_INT_SAMPLER_2D_ARRAY                 = 0x8DD7;
	public static int DEPTH_COMPONENT32F                            = 0x8CAC;
	public static int DEPTH32F_STENCIL8                             = 0x8CAD;
	public static int FLOAT_32_UNSIGNED_INT_24_8_REV                = 0x8DAD;
	public static int FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING         = 0x8210;
	public static int FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE         = 0x8211;
	public static int FRAMEBUFFER_ATTACHMENT_RED_SIZE               = 0x8212;
	public static int FRAMEBUFFER_ATTACHMENT_GREEN_SIZE             = 0x8213;
	public static int FRAMEBUFFER_ATTACHMENT_BLUE_SIZE              = 0x8214;
	public static int FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE             = 0x8215;
	public static int FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE             = 0x8216;
	public static int FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE           = 0x8217;
	public static int FRAMEBUFFER_DEFAULT                           = 0x8218;
	public static int UNSIGNED_INT_24_8                             = 0x84FA;
	public static int DEPTH24_STENCIL8                              = 0x88F0;
	public static int UNSIGNED_NORMALIZED                           = 0x8C17;
	public static int DRAW_FRAMEBUFFER_BINDING                      = 0x8CA6; /* Same as FRAMEBUFFER_BINDING */
	public static int READ_FRAMEBUFFER                              = 0x8CA8;
	public static int DRAW_FRAMEBUFFER                              = 0x8CA9;
	public static int READ_FRAMEBUFFER_BINDING                      = 0x8CAA;
	public static int RENDERBUFFER_SAMPLES                          = 0x8CAB;
	public static int FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER          = 0x8CD4;
	public static int MAX_COLOR_ATTACHMENTS                         = 0x8CDF;
	public static int COLOR_ATTACHMENT1                             = 0x8CE1;
	public static int COLOR_ATTACHMENT2                             = 0x8CE2;
	public static int COLOR_ATTACHMENT3                             = 0x8CE3;
	public static int COLOR_ATTACHMENT4                             = 0x8CE4;
	public static int COLOR_ATTACHMENT5                             = 0x8CE5;
	public static int COLOR_ATTACHMENT6                             = 0x8CE6;
	public static int COLOR_ATTACHMENT7                             = 0x8CE7;
	public static int COLOR_ATTACHMENT8                             = 0x8CE8;
	public static int COLOR_ATTACHMENT9                             = 0x8CE9;
	public static int COLOR_ATTACHMENT10                            = 0x8CEA;
	public static int COLOR_ATTACHMENT11                            = 0x8CEB;
	public static int COLOR_ATTACHMENT12                            = 0x8CEC;
	public static int COLOR_ATTACHMENT13                            = 0x8CED;
	public static int COLOR_ATTACHMENT14                            = 0x8CEE;
	public static int COLOR_ATTACHMENT15                            = 0x8CEF;
	public static int FRAMEBUFFER_INCOMPLETE_MULTISAMPLE            = 0x8D56;
	public static int MAX_SAMPLES                                   = 0x8D57;
	public static int HALF_FLOAT                                    = 0x140B;
	public static int RG                                            = 0x8227;
	public static int RG_INTEGER                                    = 0x8228;
	public static int R8                                            = 0x8229;
	public static int RG8                                           = 0x822B;
	public static int R16F                                          = 0x822D;
	public static int R32F                                          = 0x822E;
	public static int RG16F                                         = 0x822F;
	public static int RG32F                                         = 0x8230;
	public static int R8I                                           = 0x8231;
	public static int R8UI                                          = 0x8232;
	public static int R16I                                          = 0x8233;
	public static int R16UI                                         = 0x8234;
	public static int R32I                                          = 0x8235;
	public static int R32UI                                         = 0x8236;
	public static int RG8I                                          = 0x8237;
	public static int RG8UI                                         = 0x8238;
	public static int RG16I                                         = 0x8239;
	public static int RG16UI                                        = 0x823A;
	public static int RG32I                                         = 0x823B;
	public static int RG32UI                                        = 0x823C;
	public static int VERTEX_ARRAY_BINDING                          = 0x85B5;
	public static int R8_SNORM                                      = 0x8F94;
	public static int RG8_SNORM                                     = 0x8F95;
	public static int RGB8_SNORM                                    = 0x8F96;
	public static int RGBA8_SNORM                                   = 0x8F97;
	public static int SIGNED_NORMALIZED                             = 0x8F9C;
	public static int COPY_READ_BUFFER                              = 0x8F36;
	public static int COPY_WRITE_BUFFER                             = 0x8F37;
	public static int COPY_READ_BUFFER_BINDING                      = 0x8F36; /* Same as COPY_READ_BUFFER */
	public static int COPY_WRITE_BUFFER_BINDING                     = 0x8F37; /* Same as COPY_WRITE_BUFFER */
	public static int UNIFORM_BUFFER                                = 0x8A11;
	public static int UNIFORM_BUFFER_BINDING                        = 0x8A28;
	public static int UNIFORM_BUFFER_START                          = 0x8A29;
	public static int UNIFORM_BUFFER_SIZE                           = 0x8A2A;
	public static int MAX_VERTEX_UNIFORM_BLOCKS                     = 0x8A2B;
	public static int MAX_FRAGMENT_UNIFORM_BLOCKS                   = 0x8A2D;
	public static int MAX_COMBINED_UNIFORM_BLOCKS                   = 0x8A2E;
	public static int MAX_UNIFORM_BUFFER_BINDINGS                   = 0x8A2F;
	public static int MAX_UNIFORM_BLOCK_SIZE                        = 0x8A30;
	public static int MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS        = 0x8A31;
	public static int MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS      = 0x8A33;
	public static int UNIFORM_BUFFER_OFFSET_ALIGNMENT               = 0x8A34;
	public static int ACTIVE_UNIFORM_BLOCKS                         = 0x8A36;
	public static int UNIFORM_TYPE                                  = 0x8A37;
	public static int UNIFORM_SIZE                                  = 0x8A38;
	public static int UNIFORM_BLOCK_INDEX                           = 0x8A3A;
	public static int UNIFORM_OFFSET                                = 0x8A3B;
	public static int UNIFORM_ARRAY_STRIDE                          = 0x8A3C;
	public static int UNIFORM_MATRIX_STRIDE                         = 0x8A3D;
	public static int UNIFORM_IS_ROW_MAJOR                          = 0x8A3E;
	public static int UNIFORM_BLOCK_BINDING                         = 0x8A3F;
	public static int UNIFORM_BLOCK_DATA_SIZE                       = 0x8A40;
	public static int UNIFORM_BLOCK_ACTIVE_UNIFORMS                 = 0x8A42;
	public static int UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES          = 0x8A43;
	public static int UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER     = 0x8A44;
	public static int UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER   = 0x8A46;
	public static int INVALID_INDEX                                 = 0xFFFFFFFF;
	public static int MAX_VERTEX_OUTPUT_COMPONENTS                  = 0x9122;
	public static int MAX_FRAGMENT_INPUT_COMPONENTS                 = 0x9125;
	public static int MAX_SERVER_WAIT_TIMEOUT                       = 0x9111;
	public static int OBJECT_TYPE                                   = 0x9112;
	public static int SYNC_CONDITION                                = 0x9113;
	public static int SYNC_STATUS                                   = 0x9114;
	public static int SYNC_FLAGS                                    = 0x9115;
	public static int SYNC_FENCE                                    = 0x9116;
	public static int SYNC_GPU_COMMANDS_COMPLETE                    = 0x9117;
	public static int UNSIGNALED                                    = 0x9118;
	public static int SIGNALED                                      = 0x9119;
	public static int ALREADY_SIGNALED                              = 0x911A;
	public static int TIMEOUT_EXPIRED                               = 0x911B;
	public static int CONDITION_SATISFIED                           = 0x911C;
	public static int WAIT_FAILED                                   = 0x911D;
	public static int SYNC_FLUSH_COMMANDS_BIT                       = 0x00000001;
	public static int VERTEX_ATTRIB_ARRAY_DIVISOR                   = 0x88FE;
	public static int ANY_SAMPLES_PASSED                            = 0x8C2F;
	public static int ANY_SAMPLES_PASSED_CONSERVATIVE               = 0x8D6A;
	public static int SAMPLER_BINDING                               = 0x8919;
	public static int RGB10_A2UI                                    = 0x906F;
	public static int INT_2_10_10_10_REV                            = 0x8D9F;
	public static int TRANSFORM_FEEDBACK                            = 0x8E22;
	public static int TRANSFORM_FEEDBACK_PAUSED                     = 0x8E23;
	public static int TRANSFORM_FEEDBACK_ACTIVE                     = 0x8E24;
	public static int TRANSFORM_FEEDBACK_BINDING                    = 0x8E25;
	public static int TEXTURE_IMMUTABLE_FORMAT                      = 0x912F;
	public static int MAX_ELEMENT_INDEX                             = 0x8D6B;
	public static int TEXTURE_IMMUTABLE_LEVELS                      = 0x82DF;

	public static long TIMEOUT_IGNORED                              = -1;
	
	void beginQuery( int target,  WebGLQuery query);
	void beginTransformFeedback( int primitiveMode);
	void bindBufferBase( int target,  int index,  WebGLBuffer buffer);
	void bindBufferRange( int target,  int index,  WebGLBuffer buffer,  int offset,  int size);
	void bindSampler( int unit,  WebGLSampler sampler);
	void bindTransformFeedback( int target,  WebGLTransformFeedback tf);
	void bindVertexArray( WebGLVertexArrayObject array);
	void blitFramebuffer( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter);
	void clearBufferfi( int buffer,  int drawbuffer,  float depth,  int stencil);
	void clearBufferfv( int buffer,  int drawbuffer,  Float32Array values, int srcOffset);
	void clearBufferiv( int buffer,  int drawbuffer,  Int32Array values, int srcOffset);
	void clearBufferuiv( int buffer,  int drawbuffer,  ArrayBuffer values, int srcOffset);
	int clientWaitSync( WebGLSync sync,  int flags,  int timeout);
	void compressedTexImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  int offset);
	void compressedTexImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  ArrayBufferView srcData, int srcOffset, int srcLengthOverride);
	void compressedTexSubImage3D( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  int offset);
	void compressedTexSubImage3D( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  ArrayBufferView srcData, int srcOffset, int srcLengthOverride);
	void copyBufferSubData( int readTarget,  int writeTarget,  int readOffset,  int writeOffset,  int size);
	void copyTexSubImage3D( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height);
	WebGLQuery createQuery();
	WebGLSampler createSampler();
	WebGLTransformFeedback createTransformFeedback();
	WebGLVertexArrayObject createVertexArray();
	void deleteQuery( WebGLQuery query);
	void deleteSampler( WebGLSampler sampler);
	void deleteSync( WebGLSync sync);
	void deleteTransformFeedback( WebGLTransformFeedback tf);
	void deleteVertexArray( WebGLVertexArrayObject vertexArray);
	void drawArraysInstanced( int mode,  int first,  int count,  int instanceCount);
	void drawBuffers( int buffers[]);
	void drawElementsInstanced( int mode,  int count,  int type,  int offset,  int instanceCount);
	void drawRangeElements( int mode,  int start,  int end,  int count,  int type,  int offset);
	void endQuery( int target);
	void endTransformFeedback();
	WebGLSync fenceSync( int condition,  int flags);
	void framebufferTextureLayer( int target,  int attachment,  WebGLTexture texture,  int level,  int layer);
	String getActiveUniformBlockName( WebGLProgram program,  int uniformBlockIndex);
	JSObject getActiveUniformBlockParameter( WebGLProgram program,  int uniformBlockIndex,  int pname);
	JSObject getActiveUniforms( WebGLProgram program,  int uniformIndices[],  int pname);
	void getBufferSubData( int target,  int srcByteOffset,  ArrayBufferView dstBuffer, int dstOffset, int length);
	int getFragDataLocation( WebGLProgram program,  String name);
	JSObject getIndexedParameter( int target,  int index);
	JSObject getInternalformatParameter( int target,  int internalformat,  int pname);
	WebGLQuery getQuery( int target,  int pname);
	JSObject getQueryParameter( WebGLQuery query,  int pname);
	JSObject getSamplerParameter( WebGLSampler sampler,  int pname);
	JSObject getSyncParameter( WebGLSync sync,  int pname);
	WebGLActiveInfo getTransformFeedbackVarying( WebGLProgram program,  int index);
	int getUniformBlockIndex( WebGLProgram program,  String uniformBlockName);
	int[] getUniformIndices( WebGLProgram program,  String uniformNames[]);
	void invalidateFramebuffer( int target,  int attachments[]);
	void invalidateSubFramebuffer( int target,  int attachments[],  int x,  int y,  int width,  int height);
	boolean isQuery( WebGLQuery query);
	boolean isSampler( WebGLSampler sampler);
	boolean isSync( WebGLSync sync);
	boolean isTransformFeedback( WebGLTransformFeedback tf);
	boolean isVertexArray( WebGLVertexArrayObject vertexArray);
	void pauseTransformFeedback();
	void readBuffer( int src);
	void renderbufferStorageMultisample( int target,  int samples,  int internalformat,  int width,  int height);
	void resumeTransformFeedback();
	void samplerParameterf( WebGLSampler sampler,  int pname,  float param);
	void samplerParameteri( WebGLSampler sampler,  int pname,  int param);
	void texImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  int pboOffset);
	void texImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  HTMLImageElement source);
	void texImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  HTMLCanvasElement source);
	void texImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  ArrayBufferView srcData);
	void texImage3D( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  ArrayBufferView srcData,  int srcOffset);
	void texStorage2D( int target,  int levels,  int internalformat,  int width,  int height);
	void texStorage3D( int target,  int levels,  int internalformat,  int width,  int height,  int depth);
	void texSubImage3D( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  int pboOffset);
	void texSubImage3D( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  HTMLImageElement source);
	void texSubImage3D( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  ArrayBufferView srcData, int srcOffset);
	void transformFeedbackVaryings( WebGLProgram program,  String varyings[],  int bufferMode);
	void uniform1ui( WebGLUniformLocation location,  int v0);
	void uniform1uiv( WebGLUniformLocation location,  ArrayBuffer data, int srcOffset, int srcLength);
	void uniform1uiv( WebGLUniformLocation location,  ArrayBuffer data);
	void uniform2ui( WebGLUniformLocation location,  int v0,  int v1);
	void uniform2uiv( WebGLUniformLocation location,  ArrayBuffer data, int srcOffset, int srcLength);
	void uniform2uiv( WebGLUniformLocation location,  ArrayBuffer data);
	void uniform3ui( WebGLUniformLocation location,  int v0,  int v1,  int v2);
	void uniform3uiv( WebGLUniformLocation location,  ArrayBuffer data, int srcOffset, int srcLength);
	void uniform3uiv( WebGLUniformLocation location,  ArrayBuffer data);
	void uniform4ui( WebGLUniformLocation location,  int v0,  int v1,  int v2,  int v3);
	void uniform4uiv( WebGLUniformLocation location,  ArrayBuffer data, int srcOffset, int srcLength);
	void uniform4uiv( WebGLUniformLocation location,  ArrayBuffer data);
	void uniformBlockBinding( WebGLProgram program,  int uniformBlockIndex,  int uniformBlockBinding);
	void uniformMatrix2x3fv( WebGLUniformLocation location,  boolean transpose,  Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix2x4fv( WebGLUniformLocation location,  boolean transpose,  Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix3x2fv( WebGLUniformLocation location,  boolean transpose,  Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix3x4fv( WebGLUniformLocation location,  boolean transpose,  Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix4x2fv( WebGLUniformLocation location,  boolean transpose,  Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix4x3fv( WebGLUniformLocation location,  boolean transpose,  Float32Array data, int srcOffset, int srcLength);
	void vertexAttribDivisor( int index,  int divisor);
	void vertexAttribI4i( int index,  int x,  int y,  int z,  int w);
	void vertexAttribI4iv( int index,  Int32Array values);
	void vertexAttribI4ui( int index,  int x,  int y,  int z,  int w);
	void vertexAttribI4uiv( int index,  ArrayBuffer values);
	void vertexAttribIPointer( int index,  int size,  int type,  int stride,  int offset);
	
	void uniformMatrix4x2fv(WebGLUniformLocation location, boolean transpose,Float32Array data);


	void uniformMatrix2x3fv(WebGLUniformLocation location, boolean transpose,Float32Array data);


//	void uniformMatrix3fv(WebGLUniformLocation location, boolean transpose,Float32Array data);

	void uniformMatrix3x2fv(WebGLUniformLocation location, boolean transpose,Float32Array data);
	void uniformMatrix4x3fv(WebGLUniformLocation location, boolean transpose,Float32Array data);

	void uniformMatrix2x4fv(WebGLUniformLocation location, boolean transpose,Float32Array data);

	void uniformMatrix3x4fv(WebGLUniformLocation location, boolean transpose,Float32Array data);

    
	
	// Overloads
	void bufferData(int target, int size, int usage);
//	void bufferData(int target, BufferSource srcData, int usage);
	void bufferData(int target, ArrayBufferView srcData, int usage, int srcOffset, int length);
	void bufferSubData(int target, int dstByteOffset, ArrayBufferView srcData);
	void bufferSubData(int target, int dstByteOffset, ArrayBufferView srcData, int srcOffset, int length);
	void compressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, int offset);
	void compressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, ArrayBufferView srcData, int srcOffset, int srcLengthOverride);
	void compressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, int offset);
	void compressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, ArrayBufferView srcData, int srcOffset, int srcLengthOverride);
	void readPixels(int x, int y, int width, int height, int format, int type, ArrayBufferView dstData);
	void readPixels(int x, int y, int width, int height, int format, int type, int offset);
	void readPixels(int x, int y, int width, int height, int format, int type, ArrayBufferView dstData, int dstOffset);
	void texImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ArrayBufferView pixels);
	void texImage2D(int target, int level, int internalformat, int format, int type, ArrayBufferView source);
	void texImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, int pboOffset);
//	void texImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ArrayBuffer source);
	void texImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ArrayBufferView srcData, int srcOffset);
	void texSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ArrayBufferView pixels);
	void texSubImage2D(int target, int level, int xoffset, int yoffset, int format, int type, HTMLImageElement source);
	void texSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, int pboOffset);
//	void texSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, TexImageSource source);
	void texSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, ArrayBufferView srcData, int srcOffset);
	void uniform1fv(WebGLUniformLocation location, Float32Array data, int srcOffset, int srcLength);
	void uniform1iv(WebGLUniformLocation location, Int32Array data, int srcOffset, int srcLength);
	void uniform2fv(WebGLUniformLocation location, Float32Array data, int srcOffset, int srcLength);
	void uniform2iv(WebGLUniformLocation location, Int32Array data, int srcOffset, int srcLength);
	void uniform3fv(WebGLUniformLocation location, Float32Array data, int srcOffset, int srcLength);
	void uniform3iv(WebGLUniformLocation location, Int32Array data, int srcOffset, int srcLength);
	void uniform4fv(WebGLUniformLocation location, Float32Array data, int srcOffset, int srcLength);
	void uniform4iv(WebGLUniformLocation location, Int32Array data, int srcOffset, int srcLength);
	void uniformMatrix2fv(WebGLUniformLocation location, boolean transpose, Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix3fv(WebGLUniformLocation location, boolean transpose, Float32Array data, int srcOffset, int srcLength);
	void uniformMatrix4fv(WebGLUniformLocation location, boolean transpose, Float32Array data, int srcOffset, int srcLength);
	
	
}
